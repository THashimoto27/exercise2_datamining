}else
{
tmp = saratoga_train[,i] * saratoga_train[,j]
colnames(tmp) <- paste(colnames(saratoga_train[i]),"_",colnames(saratoga_train[,j]))
}
data <- c(data,tmp)
}
}
tmp = saratoga_train[,1] * saratoga_train[,2]
colnames(tmp) <- paste(colnames(saratoga_train[1]),"_",colnames(saratoga_train[,2]))
tmp = saratoga_train[,1] * saratoga_train[,2]
data <- NULL
for (i in 1:10){
for (j in i:10){
if(j==i){
tmp = as.data.frame(saratoga_train[,j]^2)
colnames(tmp) <- paste(colnames(saratoga_train[j]),"^2")
}else
{
tmp = as.data.frame(saratoga_train[,i] * saratoga_train[,j])
colnames(tmp) <- paste(colnames(saratoga_train[i]),"_",colnames(saratoga_train[,j]))
}
data <- as.frame(c(data,tmp))
}
}
data <- NULL
for (i in 1:10){
for (j in i:10){
if(j==i){
tmp = as.data.frame(saratoga_train[,j]^2)
colnames(tmp) <- paste(colnames(saratoga_train[j]),"^2")
}else
{
tmp = as.data.frame(saratoga_train[,i] * saratoga_train[,j])
colnames(tmp) <- paste(colnames(saratoga_train[i]),"_",colnames(saratoga_train[,j]))
}
data <- as.data.frame(c(data,tmp))
}
}
View(data)
tmp = as.data.frame(saratoga_train[,1] * saratoga_train[,1])
colnames(tmp) <- paste(colnames(saratoga_train[1]),"_",colnames(saratoga_train[,1]))
tmp = as.data.frame(saratoga_train[,1] * saratoga_train[,1])
colnames(tmp) <- paste(colnames(saratoga_train[1]),"_",colnames(saratoga_train[,1]))
View(tmp)
data <- NULL
for (i in 1:10){
for (j in i:10){
if(j==i){
tmp = as.data.frame(saratoga_train[,j]^2)
colnames(tmp) <- paste(colnames(saratoga_train[j]),"^2")
}else
{
tmp = as.data.frame(saratoga_train[,i] * saratoga_train[,j])
colnames(tmp) <- paste(colnames(saratoga_train[,i]),"_",colnames(saratoga_train[,j]))
}
data <- as.data.frame(c(data,tmp))
}
}
View(data)
tmp = as.data.frame(saratoga_train[,1] * saratoga_train[,2])
colnames(tmp) <- paste(colnames(saratoga_train[,1]),"_",colnames(saratoga_train[,2]))
View(tmp)
colnames(saratoga_train[,1])
data <- NULL
for (i in 1:10){
for (j in i:10){
if(j==i){
tmp = as.data.frame(saratoga_train[,j]^2)
colnames(tmp) <- paste(colnames(saratoga_train[j]),"^2")
}else
{
tmp = as.data.frame(saratoga_train[,i] * saratoga_train[,j])
colnames(tmp) <- paste(colnames(saratoga_train[i]),"_",colnames(saratoga_train[j]))
}
data <- as.data.frame(c(data,tmp))
}
}
View(data)
View(saratoga_train)
data <- NULL
for (i in 2:10){
for (j in i:10){
if(j==i){
tmp = as.data.frame(saratoga_train[,j]^2)
colnames(tmp) <- paste(colnames(saratoga_train[j]),"^2")
}else
{
tmp = as.data.frame(saratoga_train[,i] * saratoga_train[,j])
colnames(tmp) <- paste(colnames(saratoga_train[i]),"_",colnames(saratoga_train[j]))
}
data <- as.data.frame(c(data,tmp))
}
}
View(data)
data <- as.data.frame(c(data,saratoga_train[1],saratoga_train[11:16]))
View(data)
data_train <- as.data.frame(c(all_polym(data_train),saratoga_train[1],saratoga_train[11:16]))
all_polym <- function (dataset){
result <- NULL
for (i in 1:ncol(dataset)){
for (j in i:ncol(dataset)){
if(j==i){
tmp = as.data.frame(dataset[,j]^2)
colnames(tmp) <- paste(colnames(dataset[j]),"^2")
}else
{
tmp = as.data.frame(dataset[,i] * dataset[,j])
colnames(tmp) <- paste(colnames(dataset[i]),"_",colnames(dataset[j]))
}
result <- as.data.frame(c(data,tmp))
}
}
return(result)
}
data_train <- as.data.frame(c(saratoga_train[1],all_polym(saratoga_train[2:10]),saratoga_train[11:16]))
View(data_train)
all_polym2 <- function (dataset){
result <- NULL
for (i in 1:ncol(dataset)){
for (j in i:ncol(dataset)){
if(j==i){
tmp = as.data.frame(dataset[,j]^2)
colnames(tmp) <- paste(colnames(dataset[j]),"^2")
}else
{
tmp = as.data.frame(dataset[,i] * dataset[,j])
colnames(tmp) <- paste(colnames(dataset[i]),"_",colnames(dataset[j]))
}
result <- as.data.frame(c(data,tmp))
}
}
return(result)
}
data_train <- as.data.frame(c(saratoga_train[1],all_polym2(saratoga_train[2:10]),saratoga_train[11:16]))
View(data_train)
all_polym2(saratoga_train[2:10])
View(saratoga_train)
ncol(saratoga_train[2:10])
View(saratoga_train)
View(data_train)
View(data_train)
remove(data_train)
all_polym2 <- function (dataset){
result <- NULL
for (i in 1:ncol(dataset)){
for (j in i:ncol(dataset)){
if(j==i){
tmp = as.data.frame(dataset[,j]^2)
colnames(tmp) <- paste(colnames(dataset[j]),"^2")
}else
{
tmp = as.data.frame(dataset[,i] * dataset[,j])
colnames(tmp) <- paste(colnames(dataset[i]),"_",colnames(dataset[j]))
}
result <- as.data.frame(c(data,tmp))
}
}
return(result)
}
data_train <- as.data.frame(c(saratoga_train[1],all_polym2(saratoga_train[2:10]),saratoga_train[11:16]))
View(data_train)
data_train <- as.data.frame(c(saratoga_train[1],all_polym2(saratoga_train[2:9]),saratoga_train[11:16]))
View(data_train)
remove(data_train)
data_train <- as.data.frame(c(saratoga_train[1],all_polym2(saratoga_train[2:9]),saratoga_train[11:16]))
View(data_train)
all_polym2 <- function (dataset){
result <- NULL
for (i in 1:ncol(dataset)){
for (j in i:ncol(dataset)){
if(j==i){
tmp = as.data.frame(dataset[,j]^2)
colnames(tmp) <- paste(colnames(dataset[j]),"sq")
}else
{
tmp = as.data.frame(dataset[,i] * dataset[,j])
colnames(tmp) <- paste(colnames(dataset[i]),"_",colnames(dataset[j]))
}
result <- as.data.frame(c(data,tmp))
}
}
return(result)
}
data_train <- as.data.frame(c(saratoga_train[1],all_polym2(saratoga_train[2:9]),saratoga_train[11:16]))
View(data_train)
result <- NULL
tmp = as.data.frame(dataset[,1]^2)
tmp = as.data.frame(saratoga_train[,1]^2)
colnames(tmp) <- paste(colnames(saratoga_train[1]),"sq")
View(tmp)
all_polym2 <- function (dataset){
result <- NULL
for (i in 1:ncol(dataset)){
for (j in i:ncol(dataset)){
if(j==i){
tmp = as.data.frame(dataset[,j]^2)
colnames(tmp) <- paste(colnames(dataset[j]),"sq")
}else
{
tmp = as.data.frame(dataset[,i] * dataset[,j])
colnames(tmp) <- paste(colnames(dataset[i]),"_",colnames(dataset[j]))
}
result <- as.data.frame(c(result,tmp))
}
}
return(result)
}
data_train <- as.data.frame(c(saratoga_train[1],all_polym2(saratoga_train[2:10]),saratoga_train[11:16]))
View(data_train)
saratoga_split = initial_split(SaratogaHouses, prop = 0.8)
saratoga_train = training(saratoga_split)
saratoga_test = testing(saratoga_split)
data_train <- as.data.frame(c(saratoga_train[1],all_polym2(saratoga_train[2:10]),saratoga_train[11:16]))
data_test <- as.data.frame(c(saratoga_test[1],all_polym2(saratoga_test[2:10]),saratoga_test[11:16]))
## Regression the linear model with all variables
## (because the more variables you will add to the model, the lower rmse you can get)
model1 = lm(log(price)~ ., data=data_train)
Lmrmse[1] = rmse(model1,data_test)
Lmrmse =NULL
Lmrmse[1] = rmse(model1,data_test)
X_train <- saratoga_train[,2:10]
X_test <- saratoga_test[,2:10]
scale_train = apply(X_train, 2, sd) # calculate std dev for each column
Xtilde_train = scale(X_train, scale = scale_train) %>% as.data.frame
Xtilde_test = scale(X_test, scale = scale_train) %>% as.data.frame # use the training set scales!
Xtilde_train = as.data.frame(cbind(Xtilde_train, saratoga_train['price'],saratoga_train[,11:16]))
Xtilde_test = as.data.frame(cbind(Xtilde_test, saratoga_test['price'],saratoga_test[,11:16]))
maxK=200
## KNN
knnrmse = foreach(K = 2:maxK, .combine='rbind') %do% {
knn = knnreg(log(price) ~ ., data=Xtilde_train, k=K)
c(k=K,rmse=modelr::rmse(knn,Xtilde_test))
}%>% as.data.frame
Knnrmse = as.data.frame(cbind(Knnrmse, knnrmse$rmse))
# Setup
data(SaratogaHouses)
Lmrmse =NULL
Knnrmse =NULL
# Function: Create polym2
## Input: Dataset
## Output: New Dataset
## Create polynominal term by each column
## Example: dataframe(column 1*column1, column 1*column 2, .... column i*column j,....)
all_polym2 <- function (dataset){
result <- NULL
for (i in 1:ncol(dataset)){
for (j in i:ncol(dataset)){
if(j==i){
tmp = as.data.frame(dataset[,j]^2)
colnames(tmp) <- paste(colnames(dataset[j]),"sq")
}else
{
tmp = as.data.frame(dataset[,i] * dataset[,j])
colnames(tmp) <- paste(colnames(dataset[i]),"_",colnames(dataset[j]))
}
result <- as.data.frame(c(result,tmp))
}
}
return(result)
}
# Estimation
for (i in 1:10){
## Split into training and testing sets
saratoga_split = initial_split(SaratogaHouses, prop = 0.8)
saratoga_train = training(saratoga_split)
saratoga_test = testing(saratoga_split)
data_train <- as.data.frame(c(saratoga_train[1],all_polym2(saratoga_train[2:10]),saratoga_train[11:16]))
data_test <- as.data.frame(c(saratoga_test[1],all_polym2(saratoga_test[2:10]),saratoga_test[11:16]))
## Regression the linear model with all variables
## (because the more variables you will add to the model, the lower rmse you can get)
model1 = lm(log(price)~ ., data=data_train)
Lmrmse[i] = rmse(model1,data_test)
## Regression the Knn model with all variables
### now rescale for KNN with variables else dummies
X_train <- saratoga_train[,2:10]
X_test <- saratoga_test[,2:10]
scale_train = apply(X_train, 2, sd) # calculate std dev for each column
Xtilde_train = scale(X_train, scale = scale_train) %>% as.data.frame
Xtilde_test = scale(X_test, scale = scale_train) %>% as.data.frame # use the training set scales!
Xtilde_train = as.data.frame(cbind(Xtilde_train, saratoga_train['price'],saratoga_train[,11:16]))
Xtilde_test = as.data.frame(cbind(Xtilde_test, saratoga_test['price'],saratoga_test[,11:16]))
maxK=200
## KNN
knnrmse = foreach(K = 2:maxK, .combine='rbind') %do% {
knn = knnreg(log(price) ~ ., data=Xtilde_train, k=K)
c(k=K,rmse=modelr::rmse(knn,Xtilde_test))
}%>% as.data.frame
Knnrmse = as.data.frame(cbind(Knnrmse, knnrmse$rmse))
}
## Compared the result of the linear and knn( knn' rmse selected by the minimum of rmse)
result_lm = mean(Lmrmse, 1, mean, na.rm=TRUE)
result_knn = as.data.frame(apply(Knnrmse[,1:10], 1, mean, na.rm=TRUE))
result_knn =result_knn[result_knn ==min(result_knn ),]
result = c(result_lm,result_knn)
#summary(model1)
summary(model1)
View(data_train)
# Setup
data(SaratogaHouses)
Lmrmse =NULL
Knnrmse =NULL
# Function: Create polym2
## Input: Dataset
## Output: New Dataset
## Create polynominal term by each column
## Example: dataframe(column 1*column1, column 1*column 2, .... column i*column j,....)
all_polym2 <- function (dataset){
result <- dataset
for (i in 1:ncol(dataset)){
for (j in i:ncol(dataset)){
if(j==i){
tmp = as.data.frame(dataset[,j]^2)
colnames(tmp) <- paste(colnames(dataset[j]),"sq")
}else
{
tmp = as.data.frame(dataset[,i] * dataset[,j])
colnames(tmp) <- paste(colnames(dataset[i]),"_",colnames(dataset[j]))
}
result <- as.data.frame(c(result,tmp))
}
}
return(result)
}
# Estimation
for (i in 1:10){
## Split into training and testing sets
saratoga_split = initial_split(SaratogaHouses, prop = 0.8)
saratoga_train = training(saratoga_split)
saratoga_test = testing(saratoga_split)
data_train <- as.data.frame(c(saratoga_train[1],all_polym2(saratoga_train[2:10]),saratoga_train[11:16]))
data_test <- as.data.frame(c(saratoga_test[1],all_polym2(saratoga_test[2:10]),saratoga_test[11:16]))
## Regression the linear model with all variables
## (because the more variables you will add to the model, the lower rmse you can get)
model1 = lm(log(price)~ ., data=data_train)
Lmrmse[i] = rmse(model1,data_test)
## Regression the Knn model with all variables
### now rescale for KNN with variables else dummies
X_train <- saratoga_train[,2:10]
X_test <- saratoga_test[,2:10]
scale_train = apply(X_train, 2, sd) # calculate std dev for each column
Xtilde_train = scale(X_train, scale = scale_train) %>% as.data.frame
Xtilde_test = scale(X_test, scale = scale_train) %>% as.data.frame # use the training set scales!
Xtilde_train = as.data.frame(cbind(Xtilde_train, saratoga_train['price'],saratoga_train[,11:16]))
Xtilde_test = as.data.frame(cbind(Xtilde_test, saratoga_test['price'],saratoga_test[,11:16]))
maxK=200
## KNN
knnrmse = foreach(K = 2:maxK, .combine='rbind') %do% {
knn = knnreg(log(price) ~ ., data=Xtilde_train, k=K)
c(k=K,rmse=modelr::rmse(knn,Xtilde_test))
}%>% as.data.frame
Knnrmse = as.data.frame(cbind(Knnrmse, knnrmse$rmse))
}
## Compared the result of the linear and knn( knn' rmse selected by the minimum of rmse)
result_lm = mean(Lmrmse, 1, mean, na.rm=TRUE)
result_knn = as.data.frame(apply(Knnrmse[,1:10], 1, mean, na.rm=TRUE))
result_knn =result_knn[result_knn ==min(result_knn ),]
result = c(result_lm,result_knn)
#summary(model1)
summary(model1)
hotels_dev <- read.csv('hotels_dev.csv')
View(hotels_dev)
hotels_val <- read.csv('hotels_val.csv')
View(hotels_dev)
View(hotels_dev)
View(hotels_dev)
View(hotels_dev)
View(hotels_dev)
hotels_dev <- read.csv('hotels_dev.csv')
hotels_val <- read.csv('hotels_val.csv')
numeric_dev <- c(hotels_dev[2:5],hotels_dev[11:12],hotels_dev[15],hotels_dev[17],hotels_dev[19],hotels_dev[21])%>% as.data.frame
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
library(knitr)
library(tidyverse)
library(sjmisc)
library(ggplot2)
library(reshape2)
library(gapminder)
library(mosaic)
library(extraDistr)
library(caret)
library(modelr)
library(parallel)
library(foreach)
library(rsample)
library(lubridate)
library(olsrr)
hotels_dev <- read.csv('hotels_dev.csv')
hotels_val <- read.csv('hotels_val.csv')
numeric_dev <- c(hotels_dev[2:5],hotels_dev[11:12],hotels_dev[15],hotels_dev[17],hotels_dev[19],hotels_dev[21])%>% as.data.frame
nonnumeric_dev <- c(hotels_dev[1],hotels_dev[6:10],hotels_dev[13:14],hotels_dev[16],hotels_dev[18],hotels_dev[20],,hotels_dev[22])%>% as.data.frame
numeric_dev <- c(hotels_dev[2:5],hotels_dev[11:12],hotels_dev[15],hotels_dev[17],hotels_dev[19],hotels_dev[21])%>% as.data.frame
nonnumeric_dev <- c(hotels_dev[1],hotels_dev[6:10],hotels_dev[13:14],hotels_dev[16],hotels_dev[18],hotels_dev[20],hotels_dev[22])%>% as.data.frame
hotels_dev_data <- c(nonnumeric_dev,all_polym2(numderic_dev)) %>%as.data.frame
# Function: Create polym2
## Input: Dataset
## Output: New Dataset
## Create polynominal term by each column
## Example: dataframe(column 1*column1, column 1*column 2, .... column i*column j,....)
all_polym2 <- function (dataset){
result <- dataset
for (i in 1:ncol(dataset)){
for (j in i:ncol(dataset)){
if(j==i){
tmp = as.data.frame(dataset[,j]^2)
colnames(tmp) <- paste(colnames(dataset[j]),"sq")
}else
{
tmp = as.data.frame(dataset[,i] * dataset[,j])
colnames(tmp) <- paste(colnames(dataset[i]),"_",colnames(dataset[j]))
}
result <- as.data.frame(c(result,tmp))
}
}
return(result)
}
hotels_dev_data <- c(nonnumeric_dev,all_polym2(numderic_dev)) %>%as.data.frame
numeric_dev <- c(hotels_dev[2:5],hotels_dev[11:12],hotels_dev[15],hotels_dev[17],hotels_dev[19],hotels_dev[21])%>% as.data.frame
nonnumeric_dev <- c(hotels_dev[1],hotels_dev[6:10],hotels_dev[13:14],hotels_dev[16],hotels_dev[18],hotels_dev[20],hotels_dev[22])%>% as.data.frame
hotels_dev_data <- c(nonnumeric_dev,all_polym2(numderic_dev)) %>%as.data.frame
hotels_dev_data <- c(nonnumeric_dev,all_polym2(numeric_dev)) %>%as.data.frame
hotels_dev_split = initial_split(hotels_dev_data, prop = 0.8)
hotels_dev_train = training(hotels_dev_split)
hotels_dev_test = testing(hotels_dev_split)
baseline1 <- glm(children~market_segment+adults+customer_type+is_repeated_guest,data=hotels_dev_train, family=binomial)
baseline2 <- glm(children~.-arrival_date,data=hotels_dev_train, family=binomial)
View(hotels_dev_train)
baseline1 <- glm(children~market_segment+adults+customer_type+is_repeated_guest,data=hotels_dev_train, family=binomial)
View(hotels_dev)
hotels_dev <- read.csv('hotels_dev.csv')
hotels_val <- read.csv('hotels_val.csv')
hotels_dev_split = initial_split(hotels_dev_data, prop = 0.8)
hotels_dev_train= training(hotels_dev_split)
hotels_dev_test = testing(hotels_dev_split)
# Models
baseline1 <- glm(children~market_segment+adults+customer_type+is_repeated_guest,data=hotels_dev_train, family=binomial)
baseline2 <- glm(children~.-arrival_date,data=hotels_dev_train, family=binomial)
View(baseline2)
# Function: Create polym2
## Input: Dataset
## Output: New Dataset
## Create polynominal term by each column
## Example: dataframe(column 1*column1, column 1*column 2, .... column i*column j,....)
all_polym2 <- function (dataset){
result <- dataset
for (i in 1:ncol(dataset)){
for (j in i:ncol(dataset)){
if(j==i){
tmp = as.data.frame(dataset[,j]^2)
colnames(tmp) <- paste(colnames(dataset[j]),"sq")
}else
{
tmp = as.data.frame(dataset[,i] * dataset[,j])
colnames(tmp) <- paste(colnames(dataset[i]),"_",colnames(dataset[j]))
}
result <- as.data.frame(c(result,tmp))
}
}
return(result)
}
numeric_dev_train <- c(hotels_dev_train[2:5],hotels_dev_train[11:12],hotels_dev_train[15],hotels_dev_train[17],hotels_dev_train[19],hotels_dev_train[21])%>% as.data.frame
nonnumeric_dev_train <- c(hotels_dev_train[1],hotels_dev_train[6:10],hotels_dev_train[13:14],hotels_dev_train[16],hotels_dev_train[18],hotels_dev_train[20],hotels_dev_train[22])%>% as.data.frame
hotels_dev_train_newmodel <- c(nonnumeric_dev_train,all_polym2(numeric_dev)) %>%as.data.frame
hotels_dev_train_newmodel <- c(nonnumeric_dev_train,all_polym2(numeric_dev)) %>%as.data.frame
hotels_dev_train_newmodel <- c(nonnumeric_dev_train,all_polym2(numeric_dev_train) %>%as.data.frame
hotels_dev_train_newmodel <- c(nonnumeric_dev_train,all_polym2(numeric_dev_train)) %>%as.data.frame
View(hotels_dev_train)
hotels_dev <- read.csv('hotels_dev.csv')
hotels_val <- read.csv('hotels_val.csv')
hotels_dev_split = initial_split(hotels_dev_data, prop = 0.8)
hotels_dev_train= training(hotels_dev_split)
hotels_dev_test = testing(hotels_dev_split)
View(hotels_dev_train)
hotels_dev <- read.csv('hotels_dev.csv')
hotels_val <- read.csv('hotels_val.csv')
hotels_dev_split = initial_split(hotels_dev, prop = 0.8)
hotels_dev_train= training(hotels_dev_split)
hotels_dev_test = testing(hotels_dev_split)
baseline1 <- glm(children~market_segment+adults+customer_type+is_repeated_guest,data=hotels_dev_train, family=binomial)
baseline2 <- glm(children~.-arrival_date,data=hotels_dev_train, family=binomial)
numeric_dev_train <- c(hotels_dev_train[2:5],hotels_dev_train[11:12],hotels_dev_train[15],hotels_dev_train[17],hotels_dev_train[19],hotels_dev_train[21])%>% as.data.frame
nonnumeric_dev_train <- c(hotels_dev_train[1],hotels_dev_train[6:10],hotels_dev_train[13:14],hotels_dev_train[16],hotels_dev_train[18],hotels_dev_train[20],hotels_dev_train[22])%>% as.data.frame
hotels_dev_train_newmodel <- c(nonnumeric_dev_train,all_polym2(numeric_dev_train)) %>%as.data.frame
model_dev <- glm(children~.,data=hotels_dev_train_newmodel, family=binomial)
View(model_dev)
numeric_dev_test <- c(hotels_dev_test[2:5],hotels_dev_test[11:12],hotels_dev_test[15],hotels_dev_test[17],hotels_dev_test[19],hotels_dev_test[21])%>% as.data.frame
nonnumeric_dev_test <- c(hotels_dev_test[1],hotels_dev_test[6:10],hotels_dev_test[13:14],hotels_dev_test[16],hotels_dev_test[18],hotels_dev_test[20],hotels_dev_test[22])%>% as.data.frame
hotels_dev_test_newmodel <- c(nonnumeric_dev_test,all_polym2(numeric_dev_test)) %>%as.data.frame
predict1 <- predict(baseline1, newdata=hotels_dev_test, type='response')
predict2 <- predict(baseline2, newdata=hotels_dev_test, type='response')
predict3 <- predict(model_dev, newdata=hotels_dev_test_newmodel, type='response')
# rmse
rmse1 <- rmse(baseline1,hotels_dev_test )
rmse2 <- rmse(baseline2,hotels_dev_test )
rmse3 <- rmse(model_dev,hotels_dev_test_newmodel )
# predict and rmse
predict1 <- predict(baseline1, newdata=hotels_dev_test, type='response')
predict2 <- predict(baseline2, newdata=hotels_dev_test, type='response')
predict3 <- predict(model_dev, newdata=hotels_dev_test_newmodel, type='response')
# rmse
rmse1 <- rmse(baseline1,hotels_dev_test )
rmse2 <- rmse(baseline2,hotels_dev_test )
rmse3 <- rmse(model_dev,hotels_dev_test_newmodel)
View(model_dev)
View(baseline2)
View(baseline1)
hotels_dev <- read.csv('hotels_dev.csv')
hotels_val <- read.csv('hotels_val.csv')
hotels_dev_split = initial_split(hotels_dev, prop = 0.8)
hotels_dev_train= training(hotels_dev_split)
hotels_dev_test = testing(hotels_dev_split)
